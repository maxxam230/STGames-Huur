<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/me/max/stgameshuur/commands/HuurCommand.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/configs/CategorienConfig.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/events/InvClickEvent.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/events/NPCRightClick.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/menu/utils/PageUtil.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/menu/CategorieHurenMenu.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/menu/CategorienMenu.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/objects/VerhuurdePlot.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/src/main/java/me/max/stgameshuur/Main.java;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/pom.xml;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Max/Documents/Minecraft Plugin Coding 2023/STGames-Huur&quot;:&quot;{\&quot;/src/main/java/me/max/stgameshuur/events/InvClickEvent.java\&quot;:\&quot;This Java file defines an event listener class called InvClickEvent that handles inventory click events in Bukkit.\\n\\nKey functions:\\n\\n- onInventoryClick - Event handler method for InventoryClickEvent. Checks if the clicked inventory matches the title for the categories menu.\\n\\n- Parses the current page number from the item in slot 45. Allows navigation to previous/next pages by clicking slots 45 and 53. \\n\\n- If a category item is clicked (not the nav slots), it checks if the player has permission for that category. \\n\\n- If permitted, it opens the CategoryHurenMenu for that category. Otherwise it cancels the click and sends an error message.\\n\\n- Any click is cancelled to prevent default Bukkit behavior and allow the custom menu logic to handle it instead.\\n\\nSo in summary, it handles navigation and item clicks within the categories inventory menu, checking permissions and opening sub-menus as needed. This allows interactive browsing and selection of item rental categories.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/menu/CategorienMenu.java\&quot;:\&quot;This Java file defines a CategorienMenu class that handles displaying a paginated inventory menu of categories to a player.\\n\\nKey functions:\\n\\n- Constructor - Takes in a list of category names, the player, current page number, and items per page. Creates the inventory and populates it.\\n\\n- nit() - Helper method to create a name tag item stack from a category name string.\\n\\n- PageUtil methods - Used to check if previous/next pages are valid and populate the current page items.\\n\\n- Inventory population - Sets left/right arrow items, category item stacks, and opens the inventory on the player.\\n\\nThe main purpose is to display a multi-page menu of categories to the player for selecting a category to view/interact with. It handles pagination, previous/next buttons, and opening the inventory on the player.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/Main.java\&quot;:\&quot;This Java file is the main class for a Bukkit/Spigot plugin that handles renting out plots of land on a Minecraft server.\\n\\nKey functions:\\n\\n- onEnable() - Called when the plugin is enabled, loads configuration, registers commands/events\\n- onDisable() - Called when plugin is disabled, saves configuration\\n- saveVerhuurdePlots() - Saves rented plot data to config \\n- laadVerhuurdePlots() - Loads rented plot data from config\\n- huurbetaal() - Checks for overdue rent payments and handles payment/non-payment\\n- addVerhuurdePlot() - Adds a new rented plot\\n- removeVerhuurdePlot() - Removes a rented plot\\n- isPlotOwner() - Checks if a player owns a plot\\n- addPlotMember()/removePlotMember() - Adds/removes player as plot owner in WorldGuard\\n- showTimeRemaining() - Shows time until next rent payment \\n- various get/set methods to manage VerhuurdePlot objects\\n\\nOverall it provides the core functionality for renting out plots of land on the server - loading/saving data, handling rent payments, adding/removing plots, checking plot ownership, etc. The commands and events hook into this main class to provide the user interface.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/events/NPCRightClick.java\&quot;:\&quot;This Java file defines a class called NPCRightClick that implements the Listener interface. It is an event handler for the NPCRightClickEvent event in Bukkit.\\n\\nKey functions:\\n\\n- It takes the Main plugin instance as a constructor parameter. This allows it to access plugin data/methods.\\n\\n- Defines prefix and errorprefix strings from the Main class for logging. \\n\\n- Has an @EventHandler annotated method called npcclick that handles the NPCRightClickEvent. \\n\\n- Checks if the ID of the clicked NPC is contained in the plugin\\u0027s npcIDs list. This allows filtering the handler to only specific NPCs.\\n\\n- Currently the body is empty, but this is where any logic would go for what should happen when the registered NPCs are right clicked by a player.\\n\\nSo in summary, it registers an event handler for when players right click Citizens NPCs. It filters to only specific NPC IDs, and the handler method is where any click logic/actions would be defined. This allows interacting with NPCs programmatically through right clicks.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/objects/VerhuurdePlot.java\&quot;:\&quot;This Java file defines a VerhuurdePlot class that represents a rented plot of land in the game.\\n\\nKey functions:\\n\\n- Constructor - Initializes a new VerhuurdePlot object with the player UUID, plot ID, last payment date, price, bank number, days between payments, payment status, and days payment has been missed.\\n\\n- get/set methods for retrieving and updating the various properties:\\n  - getPlotID\\n  - getPlayerUUID \\n  - getLastPaymentDate\\n  - getPrice\\n  - getBanknumber\\n  - getDaysbetweenpayment\\n  - setDaysbetweenpayment\\n  - hasPayed\\n  - setPayed\\n  - getDaysPaymentMissed\\n  - setDaysPaymentMissed\\n\\n- setLastPaymentDate - Updates the last payment date property\\n\\nSo in summary, this class models a rented plot of land by storing relevant details like the renter, payment history, price etc. The get/set methods allow retrieving and updating these properties as needed when handling things like rent payments, evictions etc in the game code.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/commands/HuurCommand.java\&quot;:\&quot;This Java file defines the HuurCommand class, which implements the Bukkit TabExecutor interface. It handles the /huur command in Minecraft.\\n\\nKey functions:\\n\\n- onCommand - Handles command execution when /huur is used. Parses the arguments and calls different methods based on the subcommand.\\n\\n- helpmenu - Displays help text for the command usage. \\n\\n- moetconfirmen - Checks if the player needs to confirm a payment.\\n\\n- addVerhuurdePlot - Adds a new rented plot to the config. \\n\\n- removeVerhuurdePlot - Removes a rented plot from the config.\\n\\n- sendPlotInfo - Sends info about a rented plot to the player. \\n\\n- stuurLoadedVerhuurdePlots - Sends a list of rented plots to the player.\\n\\n- returnLoadedVerhuurdePlots - Returns a list of rented plots for tab completion.\\n\\n- plotsinworld - Returns a list of region names in the player\\u0027s world for tab completion. \\n\\n- onTabComplete - Handles tab completion based on the subcommand and arguments. Returns lists of options.\\n\\nSo in summary, it defines the /huur command and handles all the subcommands, permissions, configuration updates and data retrieval/sending for the plot rental system.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/configs/CategorienConfig.java\&quot;:\&quot;This CategorienConfig.java file is used to manage the configuration file for game categories/types in the STGames-Huur plugin.\\n\\nKey functions:\\n\\n- createCategorienConfig() - Creates the HuurCategorienConfig.yml file if it doesn\\u0027t exist already.\\n\\n- getCategorienfileconfig() - Gets the FileConfiguration object for the categories config file. \\n\\n- save() - Saves any changes made to the FileConfiguration back to the HuurCategorienConfig.yml file.\\n\\nThe main purpose of this class is to provide easy access to load, modify and save the categories configuration file. It handles:\\n\\n- Creating the file if needed\\n- Loading the file contents into a FileConfiguration object \\n- Saving any changes back to the file\\n- Providing getter methods to access the FileConfiguration\\n\\nThis allows other classes to easily read/write category data from/to the configuration file without having to directly deal with file I/O.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/menu/utils/PageUtil.java\&quot;:\&quot;This PageUtil Java file contains utility methods for working with paginated lists of items in Bukkit inventories.\\n\\nKey functions:\\n\\n- getPageItems(List\\u003cItemStack\\u003e itemStacks, int page, int spaces) - Returns a List containing the ItemStacks for a specific page, given the full list of items, the page number, and number of spaces per page.\\n\\n- isPageValid(List\\u003cItemStack\\u003e itemStacks, int page, int spaces) - Checks if a given page number is valid based on the total number of items and spaces per page. Returns false if page is \\u003c\\u003d 0 or if it would exceed the item list size.\\n\\nThe main purpose is to allow splitting a long list of items into multiple pages that can be browsed through an inventory menu in Minecraft. getPageItems extracts the subset of items for a specific page number. isPageValid validates that the requested page is within bounds of the total items.\\n\\nThis allows building pagination/navigation into inventory menus to browse through long lists of items/options across multiple pages of a limited-size inventory screen.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This is a Maven POM (Project Object Model) file. It defines the configuration for a Maven project.\\n\\nKey functions:\\n\\n- Defines the project coordinates like groupId, artifactId, version\\n- Specifies the packaging type as jar \\n- Sets the Java version to 1.8\\n- Configures the maven-compiler-plugin to compile Java code\\n- Configures the maven-shade-plugin to create a fat jar with all dependencies\\n- Defines repositories to resolve dependencies from\\n- Lists project dependencies and their versions\\n- Provides configuration for plugins and resources\\n\\nIn summary, the POM file provides all the configuration needed by Maven to build the project, manage dependencies, and produce the final package (jar file). It defines metadata about the project and configures the build process.\&quot;,\&quot;/README.md\&quot;:\&quot;Here is an explanation of what the README.md file is for a plugin and some key functions it typically contains:\\n\\nThe README.md file is meant to provide documentation and information about the plugin to users and developers. It is usually the first file someone will see when downloading or looking at the plugin source code.\\n\\nSome key things a README.md file for a plugin would typically include:\\n\\n- Description - A brief description of what the plugin is for and its main purpose/functionality.\\n\\n- Installation instructions - Steps required to install the plugin properly for the game/platform it is meant for. This may include dependencies, permissions needed, etc. \\n\\n- Usage/Getting started - Examples or instructions on how to use the main features and functions of the plugin once installed.\\n\\n- Features - An overview list of the main features and capabilities the plugin provides.\\n\\n- Configuration - Details on any configuration options, settings, or customization available for the plugin. \\n\\n- Support - Information on where to get support or report issues, like a contact email or issue tracker link.\\n\\n- Contributing - Guidelines for contributing to the plugin\\u0027s development if it is open source. \\n\\n- License - The license under which the plugin is distributed, like GPL, MIT, etc. \\n\\n- Changelog - List of updates and changes made in new versions of the plugin.\\n\\nSo in summary, the README provides the essential user documentation and helps users get started with using the plugin properly.\&quot;,\&quot;/src/main/java/me/max/stgameshuur/menu/CategorieHurenMenu.java\&quot;:\&quot;This Java file defines a CategorieHurenMenu class that handles displaying a category selection menu in Minecraft.\\n\\nKey functions:\\n\\n- Constructor CategorieHurenMenu(Player p, String categorie) - Creates the inventory object and sets the title to the category passed in.\\n\\n- Bukkit.createInventory(null,54,categorie) - Creates a new inventory with 54 slots and the given title.\\n\\n- inv.setItem(2,new ItemStack(Material.DRAGON_EGG)) - Sets the item in slot 2 to a dragon egg item. \\n\\n- p.openInventory(inv) - Opens the inventory UI to the player.\\n\\nSo in summary, it creates a new inventory menu with a title based on the category, sets a sample item in one slot, and opens the inventory UI to the player who called the constructor. This allows displaying a category selection menu in Minecraft for the player to browse and select different item rentals.\&quot;}&quot;}" />
  </component>
</project>